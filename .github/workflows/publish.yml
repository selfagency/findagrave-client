name: Publish to NPM

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if release exists for current version
        id: check_release
        run: |
          VERSION=${{ steps.current_version.outputs.version }}
          if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v$VERSION already exists - will bump version"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v$VERSION does not exist - will use current version"
          fi

      - name: Bump version if release exists
        if: steps.check_release.outputs.exists == 'true'
        id: bump_version
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Bump patch version
          pnpm version patch --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Commit the version bump
          git add package.json
          git commit -m "chore: bump version to v$NEW_VERSION"
          git push

      - name: Set version for release
        id: release_version
        run: |
          if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
            echo "version=${{ steps.bump_version.outputs.new_version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.current_version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Build project
        run: pnpm build

      - name: Create Git Tag
        run: |
          git tag v${{ steps.release_version.outputs.version }}
          git push origin v${{ steps.release_version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release_version.outputs.version }}
          name: Release v${{ steps.release_version.outputs.version }}
          body: |
            ## Changes
            - Automated release v${{ steps.release_version.outputs.version }}

            See the [commit history](https://github.com/${{ github.repository }}/commits/v${{ steps.release_version.outputs.version }}) for detailed changes.
          draft: false
          prerelease: false

      - name: Verify dist folder exists
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ dist folder not found after build"
            exit 1
          fi

          if [ ! -f "dist/package.json" ]; then
            echo "❌ dist/package.json not found"
            exit 1
          fi

          echo "✅ dist folder and package.json verified"

      - name: Publish to NPM
        run: |
          cd dist
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
